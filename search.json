[{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tutorial: Porting Blueprint to Shiny","text":"Blueprint React-based UI library Palantir. provides rich set components building web interfaces similar concept Microsoft’s Fluent UI Google’s MUI. tutorial (begin ) create blueprint R package, make possible use Blueprint R/Shiny akin shiny.fluent Fluent UI. give enough understanding shiny.react allow use React libraries projects, either creating “wrapper” R packages directly Shiny app. tutorial aimed advanced users feel comfortable Shiny React. need R Node.js installed.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"creating-the-package","dir":"Articles","previous_headings":"","what":"Creating the package","title":"Tutorial: Porting Blueprint to Shiny","text":"start create new package called blueprint. js directory contain Node.js toolchain JavaScript sources compiled single file. file needed use package, add js .Rbuildignore decrease size package. also good idea list dependencies DESCRIPTION file:","code":"usethis::create_package(\"blueprint\") usethis::use_build_ignore(\"js\") Imports:   htmltools,   shiny,   shiny.react"},{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"the-r-interface","dir":"Articles","previous_headings":"","what":"The R interface","title":"Tutorial: Porting Blueprint to Shiny","text":"React, component function takes props returns element. concepts map R directly. R, elements created shiny.react::reactElement(module, name, props). browser, shiny.react create element calling React.createElement(jsmodule[module][name], props). task ensure jsmodule[module][name] yields right component. accomplish , later create blueprint.js script set jsmodule global appropriately. free users package include script manually, use HTML dependency. R/components.R let’s define: define components succinctly, let’s create helper. Remember - components functions take props return elements: can now add Blueprint components package easily! Let’s try Switch ProgressBar starters.","code":"blueprintDependency <- function() {   htmltools::htmlDependency(     name = \"blueprint\",     version = \"0.1.0\",     package = \"blueprint\",     src = \"www\",     script = \"blueprint.js\"   ) } component <- function(name) {   function(...) shiny.react::reactElement(     module = \"@blueprintjs/core\",     name = name,     props = shiny.react::asProps(...),     deps = blueprintDependency()   ) } #' @export ProgressBar <- component(\"ProgressBar\")  #' @export Switch <- component(\"Switch\")"},{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"adding-blueprint","dir":"Articles","previous_headings":"","what":"Adding Blueprint","title":"Tutorial: Porting Blueprint to Shiny","text":"js directory use yarn add Blueprint library. documentation also suggests adding react react-dom, skip already provided shiny.react. use bundler generate blueprint.js script following js/src/index.js file: script make Blueprint library available jsmodule[@blueprintjs/core] browser. also load necessary CSS.","code":"yarn init --yes yarn add @blueprintjs/core const Blueprint = require('@blueprintjs/core');  require('@blueprintjs/core/lib/css/blueprint.css');  window.jsmodule = {   ...window.jsmodule,   '@blueprintjs/core': Blueprint };"},{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"bundling","dir":"Articles","previous_headings":"","what":"Bundling","title":"Tutorial: Porting Blueprint to Shiny","text":"use webpack build blueprint.js file. handy online tool can use generate configuration webpack. Let’s just pick CSS Styling section copy script js/webpack.config.js. also add dev dependencies suggested tool: Now let’s tweak config bit. change output inst/www/blueprint.js: add externals let webpack know look modules provided shiny.react: Lastly, need little hack problem present Blueprint writing : final js/webpack.config.js looks follows:","code":"yarn add --dev webpack webpack-cli css-loader style-loader output: {   path: path.join(__dirname, '..', 'inst', 'www'),   filename: 'blueprint.js' } externals: {   'react': 'jsmodule[\"react\"]',   'react-dom': 'jsmodule[\"react-dom\"]',   '@/shiny.react': 'jsmodule[\"@/shiny.react\"]' } plugins: [   new webpack.DefinePlugin({ 'process.env': '{}' }) ] const webpack = require('webpack'); const path = require('path');  const config = {   entry: './src/index.js',   output: {     path: path.join(__dirname, '..', 'inst', 'www'),     filename: 'blueprint.js'   },   module: {     rules: [       {         test: /\\.css$/,         use: [           'style-loader',           'css-loader'         ]       }     ]   },   externals: {     'react': 'jsmodule[\"react\"]',     'react-dom': 'jsmodule[\"react-dom\"]',     '@/shiny.react': 'jsmodule[\"@/shiny.react\"]'   },   plugins: [     new webpack.DefinePlugin({ 'process.env': '{}' })   ] };  module.exports = config;"},{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"building-the-package","dir":"Articles","previous_headings":"","what":"Building the package","title":"Tutorial: Porting Blueprint to Shiny","text":"ready build package! First , run webpack js directory: generate inst/www/webpack.js bundle. also generate NAMESPACE file: can now install package directly devtools::install() try !","code":"yarn webpack devtools::document()"},{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"using-the-package","dir":"Articles","previous_headings":"","what":"Using the package","title":"Tutorial: Porting Blueprint to Shiny","text":"Let’s try simple app first test components: Cool! Let’s try something advanced:","code":"library(shiny) library(shiny.react) library(blueprint)  shinyApp(   ui = tagList(     Switch(label = \"Animate\"),     ProgressBar()   ),   server = function(input, output) {} ) withDefault <- function(x, default) {   if (is.null(x)) default   else x }  shinyApp(   ui = tagList(     Switch(       onChange = JS(\"(event) => Shiny.setInputValue('animate', event.target.checked)\"),       defaultChecked = TRUE,       label = \"Animate\"     ),     reactOutput(\"progress\")   ),   server = function(input, output) {     output$progress <- renderReact({       ProgressBar(animate = withDefault(input$animate, TRUE))     })   } )"},{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"creating-input-wrappers","dir":"Articles","previous_headings":"","what":"Creating input wrappers","title":"Tutorial: Porting Blueprint to Shiny","text":"Even simple components can cumbersome use Shiny, evident last example. good idea create .shinyInput wrappers simplify life users. change js/src/index.js following: also add lines R/components.R: rebuilding reinstalling package can now rewrite last Shiny app example :","code":"const Blueprint = require('@blueprintjs/core'); const { InputAdapter } = require('@/shiny.react')  require('@blueprintjs/core/lib/css/blueprint.css');  const Switch = InputAdapter(Blueprint.Switch, (value, setValue) => ({   checked: value,   onChange: (event) => setValue(event.target.checked), }));  window.jsmodule = {   ...window.jsmodule,   '@blueprintjs/core': require('@blueprintjs/core'),   '@/blueprint': { Switch } }; input <- function(name, defaultValue) {   function(inputId, ..., value = defaultValue) shiny.react::reactElement(     module = \"@/blueprint\",     name = name,     props = shiny.react::asProps(inputId = inputId, ..., value = value),     deps = blueprintDependency()   ) }  #' @export Switch.shinyInput <- input(\"Switch\", FALSE) shinyApp(   ui = tagList(     Switch.shinyInput(       inputId = \"animate\",       value = TRUE,       label = \"Animate\"     ),     reactOutput(\"progress\")   ),   server = function(input, output) {     output$progress <- renderReact({       ProgressBar(animate = input$animate)     })   } )"},{"path":"https://appsilon.github.io/shiny.blueprint/articles/shiny-react.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Tutorial: Porting Blueprint to Shiny","text":"module name passed shiny.react::createElement() can arbitrary, following convention recommended: modules coming directly npm, use npm name, e.g. @blueprintjs/core. modules custom code, use R package name @/ prefix, e.g. @/blueprint.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kamil Żyła. Author, maintainer. Filip Akkad. Author. Filip Stachura. Author. Paweł Chabros. Author. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Żyła K, Akkad F, Stachura F, Chabros P (2023). shiny.blueprint: Palantir's Blueprint Shiny apps. R package version 0.2.0.","code":"@Manual{,   title = {shiny.blueprint: Palantir's Blueprint for Shiny apps},   author = {Kamil Żyła and Filip Akkad and Filip Stachura and Paweł Chabros},   year = {2023},   note = {R package version 0.2.0}, }"},{"path":"https://appsilon.github.io/shiny.blueprint/index.html","id":"shinyblueprint","dir":"","previous_headings":"","what":"Palantir's Blueprint for Shiny apps","title":"Palantir's Blueprint for Shiny apps","text":"Palantir’s Blueprint Shiny apps","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/index.html","id":"why-shinyblueprint","dir":"","previous_headings":"","what":"Why shiny.blueprint?","title":"Palantir's Blueprint for Shiny apps","text":"believe great UI plays huge role success application projects. shiny.blueprint gives apps: beautiful, professional look; rich set components easily usable Shiny; fast speed development Shiny famous .","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Palantir's Blueprint for Shiny apps","text":"Stable version: Development version:","code":"install.packages(\"shiny.blueprint\") remotes::install_github(\"Appsilon/shiny.blueprint\")"},{"path":"https://appsilon.github.io/shiny.blueprint/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Palantir's Blueprint for Shiny apps","text":"’s create basic shiny.blueprint app: majority Blueprint components available shiny.blueprint. Start typing shiny.blueprint:: RStudio see available components. Visit Blueprint docs see arguments (props) can passed components.","code":"library(shiny) library(shiny.blueprint)  shinyApp(   ui = tagList(     Switch.shinyInput(       inputId = \"animate\",       value = TRUE,       label = \"Animate\"     ),     reactOutput(\"progress\")   ),   server = function(input, output) {     output$progress <- renderReact({       ProgressBar(animate = input$animate)     })   } )"},{"path":"https://appsilon.github.io/shiny.blueprint/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Palantir's Blueprint for Shiny apps","text":"components usage examples R. Type ?shiny.blueprint::ComponentName see code shiny.blueprint::runExample(\"ExampleName\") launch . Run function without arguments see list available examples. showcase application components can launched shiny.blueprint::runExample(\"showcase\") visiting link. Developed ❤️ Appsilon. Get touch: opensource@appsilon.com. Appsilon Full Service Certified Posit Partner.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Alert.html","id":null,"dir":"Reference","previous_headings":"","what":"Alert — Alert","title":"Alert — Alert","text":"Documentation: https://blueprintjs.com/docs/#core/components/alert","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Alert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alert — Alert","text":"","code":"Alert(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Alert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alert — Alert","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Alert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alert — Alert","text":"","code":"library(shiny.blueprint) library(shiny) #>  #> Attaching package: ‘shiny’ #> The following object is masked from ‘package:shiny.blueprint’: #>  #>     runExample  ui <- function(id) {   ns <- NS(id)   tagList(     Button.shinyInput(       inputId = ns(\"showAlert\"),       \"Show alert\"     ),     reactOutput(ns(\"alert\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      isOpen <- reactiveVal(FALSE)     observeEvent(input$showAlert, isOpen(TRUE))     observeEvent(input$closeAlert, isOpen(FALSE))      output$alert <- renderReact({       Alert(         usePortal = FALSE,         confirmButtonText = \"Got it\",         isOpen = isOpen(),         onClose = triggerEvent(ns(\"closeAlert\")),         p(\"Hello, it's me, your alert\")       )     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Breadcrumbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Breadcrumbs — Breadcrumbs","title":"Breadcrumbs — Breadcrumbs","text":"Documentation: https://blueprintjs.com/docs/#core/components/breadcrumbs","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Breadcrumbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breadcrumbs — Breadcrumbs","text":"","code":"Breadcrumbs(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Breadcrumbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breadcrumbs — Breadcrumbs","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Breadcrumbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breadcrumbs — Breadcrumbs","text":"","code":"library(shiny.blueprint) library(shiny)  items <- list(   list(href = \"/\", icon = \"folder-close\", text = \"Users\"),   list(href = \"/\", icon = \"folder-close\", text = \"Janet\"),   list(icon = \"document\", text = \"image.jpg\") )  ui <- function(id) {   Breadcrumbs(items = items) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Button.html","id":null,"dir":"Reference","previous_headings":"","what":"Button — Button","title":"Button — Button","text":"Documentation: https://blueprintjs.com/docs/#core/components/button","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Button — Button","text":"","code":"Button(...)  Button.shinyInput(inputId, ...)  AnchorButton(...)  AnchorButton.shinyInput(inputId, ...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Button — Button","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Button — Button","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ns <- NS(id)   tagList(     textOutput(ns(\"clicks\")),     Button(       onClick = triggerEvent(ns(\"click1\")),       icon = \"refresh\",       \"Refresh\"     ),     Button.shinyInput(       inputId = ns(\"click2\"),       rightIcon = \"share\",       \"Export\"     ),     AnchorButton(       onClick = triggerEvent(ns(\"click3\")),       intent = \"primary\",       \"OK\"     ),     AnchorButton.shinyInput(       inputId = ns(\"click4\"),       intent = \"success\",       \"Next\"     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     clicks <- reactiveVal(0)     output$clicks <- renderText(paste(\"Clicks:\", clicks()))     observeEvent(input$click1, clicks(clicks() + 1))     observeEvent(input$click2, clicks(clicks() + 1))     observeEvent(input$click3, clicks(clicks() + 1))     observeEvent(input$click4, clicks(clicks() + 1))   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ButtonGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Button group — ButtonGroup","title":"Button group — ButtonGroup","text":"Documentation: https://blueprintjs.com/docs/#core/components/button-group","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ButtonGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Button group — ButtonGroup","text":"","code":"ButtonGroup(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ButtonGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Button group — ButtonGroup","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ButtonGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Button group — ButtonGroup","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ButtonGroup(     Button(icon = \"database\", \"Queries\"),     Button(icon = \"function\", \"Functions\"),     AnchorButton(rightIcon = \"caret-down\", \"Options\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Callout.html","id":null,"dir":"Reference","previous_headings":"","what":"Callout — Callout","title":"Callout — Callout","text":"Documentation: https://blueprintjs.com/docs/#core/components/callout","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Callout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callout — Callout","text":"","code":"Callout(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Callout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callout — Callout","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Callout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Callout — Callout","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   Callout(     title = \"Visually important content\",     \"The component is a simple wrapper around the CSS API\",     \" that provides props for modifiers and optional title element.\",     \" Any additional HTML props will be spread to the rendered \", Code(\"div\"), \" element.\"   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Card.html","id":null,"dir":"Reference","previous_headings":"","what":"Card — Card","title":"Card — Card","text":"Documentation: https://blueprintjs.com/docs/#core/components/card","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Card — Card","text":"","code":"Card(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Card — Card","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Card — Card","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   Card(     interactive = TRUE,     H5(tags$a(href = \"#\", \"Analytical applications\")),     tags$p(       \"User interfaces that enable people to interact smoothly with data,\",       \" ask better questions, and make better decisions.\"     ),     Button(text = \"Explore products\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkbox — Checkbox","title":"Checkbox — Checkbox","text":"Documentation: https://blueprintjs.com/docs/#core/components/checkbox","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkbox — Checkbox","text":"","code":"Checkbox(...)  Checkbox.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkbox — Checkbox","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Checkbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkbox — Checkbox","text":"","code":"library(shiny.blueprint) library(shiny)  setInput <- function(inputId, accessor = NULL) {   JS(paste0(\"x => Shiny.setInputValue('\", inputId, \"', x\", accessor, \")\")) }  ui <- function(id) {   ns <- NS(id)   tagList(     Checkbox(       onChange = setInput(ns(\"apples\"), \".target.checked\"),       defaultChecked = TRUE,       label = \"Apples\"     ),     Checkbox.shinyInput(       inputId = ns(\"bananas\"),       value = TRUE,       label = \"Bananas\"     ),     textOutput(ns(\"applesEnabled\")),     textOutput(ns(\"bananasEnabled\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$applesEnabled <- renderText(paste(\"Apples:\", deparse(input$apples)))     output$bananasEnabled <- renderText(paste(\"Bananas:\", deparse(input$bananas)))   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse — Collapse","title":"Collapse — Collapse","text":"Documentation: https://blueprintjs.com/docs/#core/components/collapse","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse — Collapse","text":"","code":"Collapse(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse — Collapse","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse — Collapse","text":"","code":"library(shiny.blueprint) library(shiny)  logs <- Pre(   \"[11:53:30] Finished 'typescript-bundle-blueprint' after 769 ms\\n\",   \"[11:53:30] Starting 'typescript-typings-blueprint'...\\n\",   \"[11:53:30] Finished 'typescript-typings-blueprint' after 198 ms\\n\",   \"[11:53:30] write ./blueprint.css\\n\",   \"[11:53:30] Finished 'sass-compile-blueprint' after 2.84 s\\n\" )  ui <- function(id) {   ns <- NS(id)   tagList(     Button.shinyInput(ns(\"toggle\"), \"Toggle logs\"),     reactOutput(ns(\"ui\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     show <- reactiveVal(FALSE)     observeEvent(input$toggle, show(!show()))     output$ui <- renderReact({       Collapse(isOpen = show(), logs)     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ControlGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Control group — ControlGroup","title":"Control group — ControlGroup","text":"Documentation: https://blueprintjs.com/docs/#core/components/control-group","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ControlGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control group — ControlGroup","text":"","code":"ControlGroup(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ControlGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control group — ControlGroup","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ControlGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control group — ControlGroup","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ControlGroup(     HTMLSelect(options = rownames(mtcars)),     InputGroup(placeholder = \"Find car...\"),     Button(icon = \"arrow-right\"),   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Dialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Dialog — Dialog","title":"Dialog — Dialog","text":"Documentation: https://blueprintjs.com/docs/#core/components/dialog.dialog","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Dialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dialog — Dialog","text":"","code":"Dialog(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Dialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dialog — Dialog","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Dialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dialog — Dialog","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ns <- NS(id)   tagList(     Button.shinyInput(       inputId = ns(\"showDialog\"),       \"Show dialog\"     ),     reactOutput(ns(\"dialog\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      isOpen <- reactiveVal(FALSE)     observeEvent(input$showDialog, isOpen(TRUE))     observeEvent(input$closeDialog, isOpen(FALSE))      output$dialog <- renderReact({       Dialog(         usePortal = FALSE,         isOpen = isOpen(),         onClose = triggerEvent(ns(\"closeDialog\")),         div(           className = \"bp4-dialog-body\",           H5(\"Analytical applications\"),           tags$p(             \"User interfaces that enable people to interact smoothly with data,\",             \" ask better questions, and make better decisions.\"           ),           Button.shinyInput(             inputId = ns(\"closeDialog\"),             \"Close\"           )         )       )     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Divider.html","id":null,"dir":"Reference","previous_headings":"","what":"Divider — Divider","title":"Divider — Divider","text":"Documentation: https://blueprintjs.com/docs/#core/components/divider","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Divider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divider — Divider","text":"","code":"Divider(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Divider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divider — Divider","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Divider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divider — Divider","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ButtonGroup(     minimal = TRUE,     Button(text = \"File\"),     Button(text = \"Edit\"),     Divider(),     Button(text = \"Create\"),     Button(text = \"Delete\"),     Divider(),     Button(icon = \"add\"),     Button(icon = \"remove\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Drawer.html","id":null,"dir":"Reference","previous_headings":"","what":"Drawer — Drawer","title":"Drawer — Drawer","text":"Documentation: https://blueprintjs.com/docs/#core/components/drawer","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Drawer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drawer — Drawer","text":"","code":"Drawer(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Drawer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drawer — Drawer","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Drawer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drawer — Drawer","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ns <- NS(id)   tagList(     Button.shinyInput(ns(\"hello\"), \"Say Hello\", intent = \"primary\"),     reactOutput(ns(\"ui\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      isOpen <- reactiveVal(FALSE)     observeEvent(input$hello, isOpen(!isOpen()))     observeEvent(input$dismissDrawer, isOpen(FALSE))      output$ui <- renderReact({       Drawer(         isOpen = isOpen(),         onClose = triggerEvent(ns(\"dismissDrawer\")),         usePortal = FALSE,         title = \"Hello\",         icon = \"info-sign\",         div(           class = \"bp4-dialog-body\",           p(\"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\")         )       )     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/EditableText.html","id":null,"dir":"Reference","previous_headings":"","what":"Editable text — EditableText","title":"Editable text — EditableText","text":"Documentation: https://blueprintjs.com/docs/#core/components/editable-text","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/EditableText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Editable text — EditableText","text":"","code":"EditableText(...)  EditableText.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/EditableText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Editable text — EditableText","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/EditableText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Editable text — EditableText","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ns <- NS(id)   tagList(     H2(EditableText(onChange = setInput(ns(\"header\")))),     EditableText.shinyInput(       inputId = ns(\"body\"),       multiline = TRUE,       minLines = 3, maxLines = 12     ),     textOutput(ns(\"headerValue\")),     textOutput(ns(\"bodyValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$headerValue <- renderText(paste(\"Header:\", deparse(input$header)))     output$bodyValue <- renderText(paste(\"Body:\", deparse(input$body)))   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/FileInput.html","id":null,"dir":"Reference","previous_headings":"","what":"FileInput — FileInput","title":"FileInput — FileInput","text":"Documentation: https://blueprintjs.com/docs/#core/components/file-input","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/FileInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FileInput — FileInput","text":"","code":"FileInput(...)  FileInput.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/FileInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FileInput — FileInput","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/FileInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FileInput — FileInput","text":"","code":"library(shiny.blueprint) library(shiny)  setInput <- function(inputId, accessor = NULL) {   JS(paste0(\"x => Shiny.setInputValue('\", inputId, \"', x\", accessor, \")\")) }  ui <- function(id) {   ns <- NS(id)   tagList(     Switch(       onChange = setInput(ns(\"apples\"), \".target.checked\"),       defaultChecked = TRUE,       label = \"Apples\"     ),     Switch.shinyInput(       inputId = ns(\"bananas\"),       value = TRUE,       label = \"Bananas\"     ),     textOutput(ns(\"applesEnabled\")),     textOutput(ns(\"bananasEnabled\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$applesEnabled <- renderText(paste(\"Apples:\", deparse(input$apples)))     output$bananasEnabled <- renderText(paste(\"Bananas:\", deparse(input$bananas)))   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/FormGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Form group — FormGroup","title":"Form group — FormGroup","text":"Documentation: https://blueprintjs.com/docs/#core/components/form-group","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/FormGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Form group — FormGroup","text":"","code":"FormGroup(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/FormGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Form group — FormGroup","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/FormGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Form group — FormGroup","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   FormGroup(     helperText = \"Helper text with details...\",     label = \"Label A\",     labelFor = \"my-button\",     labelInfo = \"(required)\",     inline = TRUE,     Switch(       defaultChecked = TRUE,       label = \"Apples\"     ),     Switch(       defaultChecked = TRUE,       label = \"Bananas\"     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/HTMLSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"HTML select — HTMLSelect","title":"HTML select — HTMLSelect","text":"Documentation: https://blueprintjs.com/docs/#core/components/html-select","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/HTMLSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTML select — HTMLSelect","text":"","code":"HTMLSelect(...)  HTMLSelect.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/HTMLSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTML select — HTMLSelect","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/HTMLSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTML select — HTMLSelect","text":"","code":"library(shiny.blueprint) library(shiny)  setInput <- function(inputId, accessor = NULL) {   JS(paste0(\"x => Shiny.setInputValue('\", inputId, \"', x\", accessor, \")\")) }  options <- list(   list(value = \"a\", label = \"Apples\"),   list(value = \"b\", label = \"Bananas\"),   list(value = \"c\", label = \"Cherries\") )  ui <- function(id) {   ns <- NS(id)   tagList(     HTMLSelect(       onChange = setInput(ns(\"choice1\"), \".target.value\"),       options = options     ),     textOutput(ns(\"text1\")),     br(),     HTMLSelect.shinyInput(       inputId = ns(\"choice2\"),       value = \"b\",       options = options     ),     textOutput(ns(\"text2\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$text1 <- renderText(deparse(input$choice1))     output$text2 <- renderText(deparse(input$choice2))   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/HTMLTable.html","id":null,"dir":"Reference","previous_headings":"","what":"HTML table — HTMLTable","title":"HTML table — HTMLTable","text":"Documentation: https://blueprintjs.com/docs/#core/components/html-table","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/HTMLTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTML table — HTMLTable","text":"","code":"HTMLTable(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/HTMLTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTML table — HTMLTable","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.blueprint/reference/HTMLTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTML table — HTMLTable","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   HTMLTable(     tags$thead(       tags$tr(tags$th(\"Project\"), tags$th(\"Stack\"), tags$th(\"Contributors\"))     ),     tags$tbody(       tags$tr(tags$td(\"Blueprint\"), tags$td(\"JS React\"), tags$td(\"268\")),       tags$tr(tags$td(\"TS\"), tags$td(\"JSX\"), tags$td(\"68\")),       tags$tr(tags$td(\"shiny.blueprint\"), tags$td(\"R JS\"), tags$td(\"2\"))     ),     tags$tfoot(       tags$tr(tags$td(\"Total\", colspan = 2), tags$td(\"1508\"))     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Icon — Icon","title":"Icon — Icon","text":"Documentation: https://blueprintjs.com/docs/#core/components/icon","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Icon — Icon","text":"","code":"Icon(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Icon — Icon","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Icon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Icon — Icon","text":"list available icons: https://blueprintjs.com/docs/#icons","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Icon — Icon","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   tagList(     Icon(icon = \"cross\"),     Icon(icon = \"globe\", size = 20),   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/InputGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Input group — InputGroup","title":"Input group — InputGroup","text":"Documentation: https://blueprintjs.com/docs/#core/components/text-inputs.input-group","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/InputGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input group — InputGroup","text":"","code":"InputGroup(...)  InputGroup.shinyInput(inputId, ..., value = defaultValue)  TextArea.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/InputGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input group — InputGroup","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/InputGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Input group — InputGroup","text":"","code":"library(shiny.blueprint) library(shiny)  setInput <- function(inputId, accessor = NULL) {   JS(paste0(\"x => Shiny.setInputValue('\", inputId, \"', x\", accessor, \")\")) }  ui <- function(id) {   ns <- NS(id)   div(     style = \"width: 20rem; display: grid; row-gap: 0.5rem\",     H4(\"Uncontrolled\"),     InputGroup(       onChange = setInput(ns(\"uncontrolledInputGroup\"), \".target.value\"),       disabled = FALSE,       large = TRUE,       leftIcon = \"filter\",       placeholder = \"Filter histogram...\",       rightElement = Spinner(intent = \"primary\", size = 20)     ),     textOutput(ns(\"uncontrolledInputGroupOutput\")),     H4(\"Controlled\"),     InputGroup.shinyInput(       inputId = ns(\"controlledInputGroup\"),       disabled = FALSE,       large = FALSE,       leftIcon = \"home\",       placeholder = \"Type something...\"     ),     textOutput(ns(\"controlledInputGroupOutput\")),     reactOutput(ns(\"passwordExample\")),     textOutput(ns(\"passwordOutput\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      output$uncontrolledInputGroupOutput <- renderText(input$uncontrolledInputGroup)     output$controlledInputGroupOutput <- renderText(input$controlledInputGroup)      isLocked <- reactiveVal(TRUE)      observeEvent(input$toggleLock, isLocked(!isLocked()))     output$passwordOutput <- renderText(input$passwordInput)      output$passwordExample <- renderReact({       lockButton <- Button.shinyInput(         inputId = ns(\"toggleLock\"),         icon = ifelse(isLocked(), \"lock\", \"unlock\"),         minimal = TRUE,         intent = \"warning\"       )       InputGroup.shinyInput(         inputId = ns(\"passwordInput\"),         disabled = FALSE,         large = FALSE,         rightElement = lockButton,         placeholder = \"Enter your password...\",         type = ifelse(isLocked(), \"password\", \"text\")       )     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Label.html","id":null,"dir":"Reference","previous_headings":"","what":"Label — Label","title":"Label — Label","text":"Documentation: https://blueprintjs.com/docs/#core/components/label","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label — Label","text":"","code":"Label(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label — Label","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label — Label","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   Label(     \"Label\",     tags$input(class = \"bp4-input\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Menu — Menu","title":"Menu — Menu","text":"Documentation: https://blueprintjs.com/docs/#core/components/menu","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Menu — Menu","text":"","code":"Menu(...)  MenuItem(...)  MenuDivider(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Menu — Menu","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Menu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Menu — Menu","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   Menu(     style = \"max-width: 200px\",     className = \"bp4-elevation-1\",     MenuDivider(title = \"Edit\"),     MenuItem(icon = \"cut\", text = \"Cut\", label = \"^X\"),     MenuItem(icon = \"duplicate\", text = \"Copy\", label = \"^C\"),     MenuItem(icon = \"clipboard\", text = \"Paste\", label = \"^V\", disabled = TRUE),     MenuDivider(title = \"Text\"),     MenuItem(       icon = \"style\", text = \"Style\",       MenuItem(icon = \"bold\", text = \"Bold\"),       MenuItem(icon = \"italic\", text = \"Italic\"),       MenuItem(icon = \"underline\", text = \"Underline\")     ),     MenuItem(       icon = \"asterisk\", text = \"Miscellaneous\",       MenuItem(icon = \"badge\", text = \"Badge\"),       MenuItem(icon = \"book\", text = \"Long items will truncate when they reach max-width\"),       MenuItem(         icon = \"more\", text = \"Look in here for even more items\",         MenuItem(icon = \"briefcase\", text = \"Briefcase\"),         MenuItem(icon = \"calculator\", text = \"Calculator\"),         MenuItem(icon = \"dollar\", text = \"Dollar\"),         MenuItem(           icon = \"dot\", text = \"Shapes\",           MenuItem(icon = \"full-circle\", text = \"Full circle\"),           MenuItem(icon = \"heart\", text = \"Heart\"),           MenuItem(icon = \"ring\", text = \"Ring\"),           MenuItem(icon = \"square\", text = \"Square\")         )       )     ),     MenuDivider(),     MenuItem(       icon = \"cog\", labelElement = Icon(icon = \"share\"),       text = \"Settings...\", intent = \"primary\"     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultiSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"MultiSelect — MultiSelect","title":"MultiSelect — MultiSelect","text":"Documentation: https://blueprintjs.com/docs/#select/multi-select2","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultiSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MultiSelect — MultiSelect","text":"","code":"MultiSelect(...)  MultiSelect.shinyInput(   inputId,   items,   selected = NULL,   ...,   noResults = \"No results.\" )"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultiSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MultiSelect — MultiSelect","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. items list options (character vector list containing text label entries) selected Initialy selected item noResults Message results found","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultiSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MultiSelect — MultiSelect","text":"","code":"library(shiny) library(shiny.blueprint)  top5Films <- list(   list(text = \"The Shawshank Redemption\", label = 1994),   list(text = \"The Godfather\", label = 1972),   list(text = \"The Godfather: Part II\", label = 1974),   list(text = \"The Dark Knight\", label = 2008),   list(text = \"12 Angry Men\", label = 1957) )  ui <- function(id) {   ns <- NS(id)   tagList(     H3(\"Multiselect\"),     MultiSelect.shinyInput(       inputId = ns(\"multiselect\"),       items = paste(\"Option\", LETTERS),       selected = c(\"Option B\", \"Option E\"),       tagInputProps = list(         tagProps = list(           intent = \"danger\"         )       )     ),     uiOutput(ns(\"multiselect_output\")),     H3(\"Multiselect with labels\"),     MultiSelect.shinyInput(       inputId = ns(\"multiselect_lab\"),       items = top5Films,       selected = c(\"12 Angry Men\", \"The Godfather\")     ),     uiOutput(ns(\"multiselect_lab_output\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$multiselect_output <- renderText({       paste(         purrr::map_chr(input$multiselect[[1]], ~ .x$text),         collapse = \", \"       )     })      output$multiselect_lab_output <- renderText({       paste(         purrr::map_chr(input$multiselect_lab[[1]], ~ .x$text),         collapse = \", \"       )     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultiSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi slider — MultiSlider","title":"Multi slider — MultiSlider","text":"Documentation: https://blueprintjs.com/docs/#core/components/sliders.multi-slider","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultiSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi slider — MultiSlider","text":"","code":"MultiSlider(...)  MultiSlider.shinyInput(inputId, values, min = NULL, max = NULL, ...)  MultiSliderHandle(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultiSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi slider — MultiSlider","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. values Numeric vector list containing value params passed MultiSliderHandle min Minimal value slider max Maximum value slider","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultiSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi slider — MultiSlider","text":"","code":"library(shiny) library(shiny.blueprint)  ui <- function(id) {   ns <- NS(id)   tagList(     reactOutput(ns(\"multiSlider\")),     textOutput(ns(\"multiSliderOutput\")),     MultiSlider.shinyInput(       inputId = ns(\"multiSliderShiny\"),       values = c(3, 6, 9)     ),     textOutput(ns(\"multiSliderShinyOutput\")),     MultiSlider.shinyInput(       inputId = ns(\"multiSliderShiny2\"),       values = list(         list(value = 3, type = \"start\", intentBefore = \"danger\"),         list(value = 8, type = \"start\", intentBefore = \"warning\"),         list(value = 14, type = \"end\", intentAfter = \"warning\"),         list(value = 17, type = \"end\", intentAfter = \"warning\")       ),       min = 0,       max = 20,       defaultTrackIntent = \"success\"     ),     textOutput(ns(\"multiSliderShinyOutput2\")),   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      thresholds <- reactiveValues(       dangerStart = 3,       warningStart = 8,       warningEnd = 14,       dangerEnd = 17     )      observeEvent(input$mutliSliderInput, {       sliderValues <- sort(input$mutliSliderInput)       thresholds$dangerStart <- sliderValues[1]       thresholds$warningStart <- sliderValues[2]       thresholds$warningEnd <- sliderValues[3]       thresholds$dangerEnd <- sliderValues[4]     })      output$multiSlider <- renderReact({       MultiSlider(         defaultTrackIntent = \"success\",         onChange = setInput(ns(\"mutliSliderInput\")),         stepSize = 1,         min = 0,         max = 20,         MultiSliderHandle(           type = \"start\",           intentBefore = \"danger\",           value = thresholds$dangerStart,           interactionKind = \"push\"         ),         MultiSliderHandle(           type = \"start\",           intentBefore = \"warning\",           value = thresholds$warningStart,           interactionKind = \"push\"         ),         MultiSliderHandle(           type = \"end\",           intentAfter = \"warning\",           value = thresholds$warningEnd,           interactionKind = \"push\"         ),         MultiSliderHandle(           type = \"end\",           intentAfter = \"danger\",           value = thresholds$dangerEnd,           interactionKind = \"push\"         )       )     })     output$multiSliderOutput <- renderText(       paste(         thresholds$dangerStart,         thresholds$warningStart,         thresholds$warningEnd,         thresholds$dangerEnd,         sep = \", \"       )     )     output$multiSliderShinyOutput <- renderText(       paste(input$multiSliderShiny, collapse = \", \")     )     output$multiSliderShinyOutput2 <- renderText(       paste(input$multiSliderShiny2, collapse = \", \")     )   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultistepDialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Multistep dialog — MultistepDialog","title":"Multistep dialog — MultistepDialog","text":"Documentation: https://blueprintjs.com/docs/#core/components/dialog.multistep-dialog","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultistepDialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multistep dialog — MultistepDialog","text":"","code":"MultistepDialog(...)  DialogStep(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultistepDialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multistep dialog — MultistepDialog","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/MultistepDialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multistep dialog — MultistepDialog","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ns <- NS(id)   tagList(     Button.shinyInput(       inputId = ns(\"showMultistepDialog\"),       \"Show multistep dialog\"     ),     reactOutput(ns(\"multistepDialog\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      isOpen <- reactiveVal(FALSE)     observeEvent(input$showMultistepDialog, isOpen(TRUE))     observeEvent(input$closeMultistepDialog, isOpen(FALSE))      output$multistepDialog <- renderReact({       MultistepDialog(         usePortal = FALSE,         isOpen = isOpen(),         title = \"Multistep dialog\",         onClose = triggerEvent(ns(\"closeMultistepDialog\")),         DialogStep(           id = \"step1\",           panel = div(             className = \"bp4-dialog-body\",             p(\"This is a step 1\")           ),           title = \"Step 1\"         ),         DialogStep(           id = \"step2\",           panel = div(             className = \"bp4-dialog-body\",             p(\"This is a step 2\")           ),           title = \"Step 2\"         ),         DialogStep(           id = \"step3\",           panel = div(             className = \"bp4-dialog-body\",             p(\"This is a step 3\")           ),           title = \"Step 3\"         )       )     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Navbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Navbar — Navbar","title":"Navbar — Navbar","text":"Documentation: https://blueprintjs.com/docs/#core/components/navbar","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Navbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Navbar — Navbar","text":"","code":"Navbar(...)  NavbarGroup(...)  NavbarHeading(...)  NavbarDivider(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Navbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Navbar — Navbar","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Navbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Navbar — Navbar","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   Navbar(     NavbarGroup(       NavbarHeading(\"Blueprint\"),       NavbarDivider(),       Button(minimal = TRUE, icon = \"home\", text = \"Home\"),       Button(minimal = TRUE, icon = \"document\", text = \"Files\")     ),     NavbarGroup(       align = \"right\",       Button(minimal = TRUE, icon = \"user\"),       Button(minimal = TRUE, icon = \"refresh\")     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/NonIdealState.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-ideal state — NonIdealState","title":"Non-ideal state — NonIdealState","text":"Documentation: https://blueprintjs.com/docs/#core/components/non-ideal-state","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/NonIdealState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-ideal state — NonIdealState","text":"","code":"NonIdealState(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/NonIdealState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-ideal state — NonIdealState","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/NonIdealState.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-ideal state — NonIdealState","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   NonIdealState(     icon = \"search\",     title = \"No search results\",     description = Card(       \"Your search didn't match any files.\",       tags$br(),       \"Try searching for something else, or create a new file.\"     ),     action = Button(icon = \"plus\", text = \"New file\", intent = \"primary\", outlined = TRUE)   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/NumericInput.html","id":null,"dir":"Reference","previous_headings":"","what":"NumericInput — NumericInput","title":"NumericInput — NumericInput","text":"Documentation: https://blueprintjs.com/docs/#core/components/numeric-input","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/NumericInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NumericInput — NumericInput","text":"","code":"NumericInput(...)  NumericInput.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/NumericInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NumericInput — NumericInput","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/NumericInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NumericInput — NumericInput","text":"","code":"library(shiny) library(shiny.blueprint)  ui <- function(id) {   ns <- NS(id)   tagList(     NumericInput(       onValueChange = setInput(ns(\"value1\")),       intent = \"primary\"     ),     textOutput(ns(\"value1Output\")),     NumericInput.shinyInput(       inputId = ns(\"value2\"),       intent = \"primary\"     ),     textOutput(ns(\"value2Output\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$value1Output <- renderText(input$value1)     output$value2Output <- renderText(input$value2)   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/OverflowList.html","id":null,"dir":"Reference","previous_headings":"","what":"Overflow list — OverflowList","title":"Overflow list — OverflowList","text":"Documentation: https://blueprintjs.com/docs/#core/components/overflow-list","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/OverflowList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overflow list — OverflowList","text":"","code":"OverflowList(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/OverflowList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overflow list — OverflowList","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/OverflowList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overflow list — OverflowList","text":"","code":"library(shiny.blueprint) library(shiny)  boxStyle <- tags$style(\"   .box {     margin: 0.5em;     padding: 0.5em;     background: silver;     font-size: 4em;   } \")  items <- lapply(   list(\"Too\", \"many\", \"words\", \"to\", \"fit\", \"on\", \"your\", \"screen!\"),   function(text) div(text, class = \"box\") )  ui <- function(id) {   tagList(     boxStyle,     OverflowList(       items = items,       visibleItemRenderer = JS(\"item => item\"),       overflowRenderer = JS(\"items => null\"),       collapseFrom = \"end\"     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Overlay.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlay — Overlay","title":"Overlay — Overlay","text":"Documentation: https://blueprintjs.com/docs/#core/components/overlay","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Overlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlay — Overlay","text":"","code":"Overlay(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Overlay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlay — Overlay","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Overlay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlay — Overlay","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ns <- NS(id)   tagList(     Button.shinyInput(       inputId = ns(\"showOverlay\"),       \"Show overlay\"     ),     reactOutput(ns(\"overlay\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      isOpen <- reactiveVal(FALSE)     observeEvent(input$showOverlay, isOpen(TRUE))     observeEvent(input$closeOverlay, isOpen(FALSE))      output$overlay <- renderReact({       Overlay(         usePortal = FALSE,         isOpen = isOpen(),         onClose = triggerEvent(ns(\"closeOverlay\")),         Card(           className = \"bp4-elevation-4 bp4-dark bp4-overlay-content\",           interactive = TRUE,           H5(\"Analytical applications\"),           tags$p(           \"User interfaces that enable people to interact smoothly with data,\",           \" ask better questions, and make better decisions.\"           ),           Button.shinyInput(             inputId = ns(\"closeOverlay\"),             \"Close\"           )         )       )     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/PanelStack2.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel stack (v2) — PanelStack2","title":"Panel stack (v2) — PanelStack2","text":"Documentation: https://blueprintjs.com/docs/#core/components/panel-stack2","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/PanelStack2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel stack (v2) — PanelStack2","text":"","code":"PanelStack2(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/PanelStack2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel stack (v2) — PanelStack2","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/PanelStack2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel stack (v2) — PanelStack2","text":"","code":"library(shiny.blueprint) library(shiny)  customComponents <- tagList(   tags$style(\"     .panel-stack {       border: 1px solid lightgrey;       width: 300px;       height: 240px;     }     .panel {       position: absolute;       top: 50%;       left: 50%;       transform: translate(-50%, -50%);     }   \"),   tags$script(HTML(\"(() => {     const React = jsmodule['react'];     const Blueprint = jsmodule['@blueprintjs/core'];      function createPanel(num) {       return {         title: `Panel ${num}`,         renderPanel: Panel,         props: { num },       };     }      function Panel({ num, openPanel }) {       const button = React.createElement(         Blueprint.Button,         {           onClick: () => openPanel(createPanel(num + 1)),           intent: Blueprint.Intent.PRIMARY,         },         'Open Panel'       )       return React.createElement('div', { className: 'panel' }, button);     }      window.createPanel = createPanel;   })()\")) )  ui <- function(id) {   tagList(     customComponents,     PanelStack2(       className = \"panel-stack\",       initialPanel = JS(\"createPanel(1)\")     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Popover.html","id":null,"dir":"Reference","previous_headings":"","what":"Popover — Popover","title":"Popover — Popover","text":"Documentation: https://blueprintjs.com/docs/#core/components/popover","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Popover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Popover — Popover","text":"","code":"Popover(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Popover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Popover — Popover","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Popover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Popover — Popover","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ns <- NS(id)   reactOutput(ns(\"ui\")) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      isOpen <- reactiveVal(FALSE)     observeEvent(input$hello, isOpen(TRUE))     observeEvent(input$dismiss, isOpen(FALSE))      output$ui <- renderReact({       Popover(         isOpen = isOpen(),         target = Button.shinyInput(ns(\"hello\"), \"Say Hello\", intent = \"primary\"),         usePortal = FALSE,         content = tags$div(           style = \"padding: 1em\",           H5(\"Hello!\"),           tags$p(\"Please read this message.\"),           Button.shinyInput(ns(\"dismiss\"), \"Dismiss\")         )       )     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ProgressBar.html","id":null,"dir":"Reference","previous_headings":"","what":"Progress bar — ProgressBar","title":"Progress bar — ProgressBar","text":"Documentation: https://blueprintjs.com/docs/#core/components/progress-bar","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ProgressBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress bar — ProgressBar","text":"","code":"ProgressBar(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ProgressBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progress bar — ProgressBar","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ProgressBar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Progress bar — ProgressBar","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ProgressBar(animate = TRUE) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Radio.html","id":null,"dir":"Reference","previous_headings":"","what":"Radio — Radio","title":"Radio — Radio","text":"Documentation: https://blueprintjs.com/docs/#core/components/radio","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Radio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radio — Radio","text":"","code":"Radio(...)  RadioGroup(...)  RadioGroup.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Radio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radio — Radio","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Radio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radio — Radio","text":"","code":"library(shiny.blueprint) library(shiny)  setInput <- function(inputId, accessor = NULL) {   JS(paste0(\"x => Shiny.setInputValue('\", inputId, \"', x\", accessor, \")\")) }  ui <- function(id) {   ns <- NS(id)   tagList(     H3(\"Favorite animal\"),     RadioGroup.shinyInput(       inputId = ns(\"animal\"),       value = \"dog\",       Radio(label = \"Cat\", value = \"cat\"),       Radio(label = \"Dog\", value = \"dog\")     ),     textOutput(ns(\"favoriteAnimal\")),     H3(\"Favorite fruit\"),     reactOutput(ns(\"fruitRadio\")),     textOutput(ns(\"favoriteFruit\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      output$favoriteAnimal <- renderText(deparse(input$animal))      fruit <- reactiveVal()     observeEvent(input$fruit, fruit(input$fruit))     output$fruitRadio <- renderReact({       RadioGroup(         onChange = setInput(ns(\"fruit\"), \".currentTarget.value\"),         selectedValue = fruit(),         Radio(label = \"Apple\", value = \"a\"),         Radio(label = \"Banana\", value = \"b\"),         Radio(label = \"Cherry\", value = \"c\")       )     })     output$favoriteFruit <- renderText(deparse(fruit()))   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/RangeSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Range slider — RangeSlider","title":"Range slider — RangeSlider","text":"Documentation: https://blueprintjs.com/docs/#core/components/sliders.range-slider","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/RangeSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Range slider — RangeSlider","text":"","code":"RangeSlider(...)  RangeSlider.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/RangeSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Range slider — RangeSlider","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/RangeSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Range slider — RangeSlider","text":"","code":"library(shiny) library(shiny.blueprint)  ui <- function(id) {   ns <- NS(id)   tagList(     Slider.shinyInput(       inputId = ns(\"value\"),       min = 0,       max = 10,       stepSize = 0.1,       labelStepSize = 10     ),     textOutput(ns(\"valueOutput\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$valueOutput <- renderText(input$value)   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ResizeSensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Resize sensor — ResizeSensor","title":"Resize sensor — ResizeSensor","text":"Documentation: https://blueprintjs.com/docs/#core/components/resize-sensor","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ResizeSensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resize sensor — ResizeSensor","text":"","code":"ResizeSensor(...)  ResizeSensor.shinyInput(inputId, ...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ResizeSensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resize sensor — ResizeSensor","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/ResizeSensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resize sensor — ResizeSensor","text":"","code":"library(shiny.blueprint) library(shiny)  setInput <- function(inputId, accessor = NULL) {   JS(paste0(     \"x => Shiny.setInputValue('\", inputId, \"', x\", accessor, \")\"   )) }  printSize <- function(content) {   paste0(content$width, \"x\", content$height) }  ui <- function(id) {   ns <- NS(id)   tagList(     tags$style(\"       .resizable {         overflow: auto;         resize: both;         width: 100px;         height: 100px;         background: silver;       }     \"),     ResizeSensor(       onResize = setInput(ns(\"resize\"), \"[0].contentRect\"),       div(         class = \"resizable\",         textOutput(ns(\"size\"))       )     ),     ResizeSensor.shinyInput(       inputId = ns(\"resizeSensor\"),       content = div(         textOutput(ns(\"resizeSensorInput\")),         style = \"           border: 1px solid black;           width: 100px;         \"       )     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$size <- renderText({       content <- req(input$resize)       printSize(content)     })     output$resizeSensorInput <- renderText({       content <- req(input$resizeSensor)       printSize(content)     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select — Select","title":"Select — Select","text":"Documentation: https://blueprintjs.com/docs/#select/select2","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select — Select","text":"","code":"Select(...)  Select.shinyInput(   inputId,   items,   selected = NULL,   ...,   noResults = \"No results.\" )"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select — Select","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. items list options (character vector list containing text label entries) selected Initialy selected item noResults Message results found","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select — Select","text":"","code":"library(shiny) library(shiny.blueprint)  top5Films <- list(   list(text = \"The Shawshank Redemption\", label = 1994),   list(text = \"The Godfather\", label = 1972),   list(text = \"The Godfather: Part II\", label = 1974),   list(text = \"The Dark Knight\", label = 2008),   list(text = \"12 Angry Men\", label = 1957) )  ui <- function(id) {   ns <- NS(id)   tagList(     H3(\"Select\"),     Select.shinyInput(       inputId = ns(\"select\"),       items = paste(\"Option\", LETTERS),       selected = \"Option C\",       noResults = \"No options.\"     ),     uiOutput(ns(\"select_output\")),     H3(\"Select with labels\"),     Select.shinyInput(       inputId = ns(\"select_lab\"),       items = top5Films,       selected = \"The Dark Knight\"     ),     uiOutput(ns(\"select_lab_output\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$select_output <- renderText(input$select$text)     output$select_lab_output <- renderText(input$select_lab$text)   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Slider.html","id":null,"dir":"Reference","previous_headings":"","what":"Slider — Slider","title":"Slider — Slider","text":"Documentation: https://blueprintjs.com/docs/#core/components/sliders.slider","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Slider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slider — Slider","text":"","code":"Slider(...)  Slider.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Slider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slider — Slider","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Slider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slider — Slider","text":"","code":"library(shiny) library(shiny.blueprint)  ui <- function(id) {   ns <- NS(id)   tagList(     Slider.shinyInput(       inputId = ns(\"value\"),       min = 0,       max = 10,       stepSize = 0.1,       labelStepSize = 10     ),     textOutput(ns(\"valueOutput\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$valueOutput <- renderText(input$value)   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Spinner.html","id":null,"dir":"Reference","previous_headings":"","what":"Spinner — Spinner","title":"Spinner — Spinner","text":"Documentation: https://blueprintjs.com/docs/#core/components/spinner","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Spinner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spinner — Spinner","text":"","code":"Spinner(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Spinner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spinner — Spinner","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Spinner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spinner — Spinner","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   Spinner(intent = \"primary\", size = 100) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Suggest.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest — Suggest","title":"Suggest — Suggest","text":"Documentation: https://blueprintjs.com/docs/#select/suggest2","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Suggest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest — Suggest","text":"","code":"Suggest(...)  Suggest.shinyInput(   inputId,   items,   selected = NULL,   ...,   noResults = \"No results.\" )"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Suggest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest — Suggest","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. items list options (character vector list containing text label entries) selected Initialy selected item noResults Message results found","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Suggest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest — Suggest","text":"","code":"library(shiny) library(shiny.blueprint)  top5Films <- list(   list(text = \"The Shawshank Redemption\", label = 1994),   list(text = \"The Godfather\", label = 1972),   list(text = \"The Godfather: Part II\", label = 1974),   list(text = \"The Dark Knight\", label = 2008),   list(text = \"12 Angry Men\", label = 1957) )  ui <- function(id) {   ns <- NS(id)   tagList(     H3(\"Suggest\"),     Suggest.shinyInput(       inputId = ns(\"suggest\"),       items = paste(\"Option\", LETTERS),       inputProps = list(         placeholder = \"Search with Suggest...\"       )     ),     uiOutput(ns(\"suggest_output\")),     H3(\"Suggest with labels\"),     Suggest.shinyInput(       inputId = ns(\"suggest_lab\"),       items = top5Films,       noResults = \"No suggestions.\"     ),     uiOutput(ns(\"suggest_lab_output\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$suggest_output <- renderText(input$suggest$text)     output$suggest_lab_output <- renderText(input$suggest_lab$text)   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Switch.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch — Switch","title":"Switch — Switch","text":"Documentation: https://blueprintjs.com/docs/#core/components/switch","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Switch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch — Switch","text":"","code":"Switch(...)  Switch.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Switch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch — Switch","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Switch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch — Switch","text":"","code":"library(shiny.blueprint) library(shiny)  setInput <- function(inputId, accessor = NULL) {   JS(paste0(\"x => Shiny.setInputValue('\", inputId, \"', x\", accessor, \")\")) }  ui <- function(id) {   ns <- NS(id)   tagList(     Switch(       onChange = setInput(ns(\"apples\"), \".target.checked\"),       defaultChecked = TRUE,       label = \"Apples\"     ),     Switch.shinyInput(       inputId = ns(\"bananas\"),       value = TRUE,       label = \"Bananas\"     ),     textOutput(ns(\"applesEnabled\")),     textOutput(ns(\"bananasEnabled\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$applesEnabled <- renderText(paste(\"Apples:\", deparse(input$apples)))     output$bananasEnabled <- renderText(paste(\"Bananas:\", deparse(input$bananas)))   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabs — Tabs","title":"Tabs — Tabs","text":"Documentation: https://blueprintjs.com/docs/#core/components/tabs","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabs — Tabs","text":"","code":"Tabs(...)  Tab(...)  TabsExpander(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabs — Tabs","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabs — Tabs","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   ns <- NS(id)   reactOutput(ns(\"tabs\")) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      currentTab <- reactiveVal(\"react\")     observeEvent(input$selectTab, currentTab(input$selectTab))     output$tabs <- renderReact(       Tabs(         selectedTabId = currentTab(),         onChange = setInput(ns(\"selectTab\")),         Tab(id = \"angular\", title = \"Angular\", panel = \"Angular\"),         Tab(id = \"ember\", title = \"Ember\", panel = \"Ember\"),         Tab(id = \"react\", title = \"React\", panel = \"React\"),         TabsExpander(),         tags$input(class = \"bp4-input\", type = \"text\", placeholder = \"Search...\")       )     )   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag — Tag","title":"Tag — Tag","text":"Documentation: https://blueprintjs.com/docs/#core/components/tag","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag — Tag","text":"","code":"Tag(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag — Tag","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tag — Tag","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   tagList(     Tag(active = TRUE, \"Hello\"),     Tag(active = TRUE, large = TRUE, \"Hello\"),     Tag(active = TRUE, round = TRUE, \"Hello\"),     Tag(active = FALSE, icon = \"home\", round = TRUE, large = TRUE, \"Hello\"),     Tag(active = TRUE, rightIcon = \"home\", \"Hello\"),     Tag(active = TRUE, round = TRUE, intent = \"primary\", interactive = TRUE, \"Hello\"),     Tag(active = TRUE, round = TRUE, intent = \"warning\", interactive = TRUE, \"Hello\"),     Tag(active = TRUE, round = TRUE, intent = \"success\", interactive = TRUE, \"Hello\"),     Tag(active = TRUE, round = TRUE, intent = \"danger\", interactive = TRUE, \"Hello\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/TagInput.html","id":null,"dir":"Reference","previous_headings":"","what":"TagInput — TagInput","title":"TagInput — TagInput","text":"Documentation: https://blueprintjs.com/docs/#core/components/tag-input","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/TagInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TagInput — TagInput","text":"","code":"TagInput(...)  TagInput.shinyInput(inputId, ..., value = defaultValue)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/TagInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TagInput — TagInput","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. value Initial value.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/TagInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TagInput — TagInput","text":"","code":"library(shiny) library(shiny.blueprint)   ui <- function(id) {   ns <- NS(id)   tagList(     TagInput.shinyInput(       inputId = ns(\"value\"),       value = c(\"one\", \"two\", \"three\")     ),     textOutput(ns(\"valueOutput\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$valueOutput <- renderText(input$value)   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Text.html","id":null,"dir":"Reference","previous_headings":"","what":"Text — Text","title":"Text — Text","text":"Documentation: https://blueprintjs.com/docs/#core/components/text","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text — Text","text":"","code":"Text(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text — Text","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text — Text","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   Text(     \"Lorem ipsum dolor sit amet,     consectetur adipiscing elit,     sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.     Ut enim ad minim veniam,     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.     Duis aute irure dolor in reprehenderit     in voluptate velit esse cillum dolore eu fugiat nulla pariatur.     Excepteur sint occaecat cupidatat non proident,     sunt in culpa qui officia deserunt mollit anim id est laborum.\"   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/TextArea.html","id":null,"dir":"Reference","previous_headings":"","what":"Text area — TextArea","title":"Text area — TextArea","text":"Documentation: https://blueprintjs.com/docs/#core/components/text-inputs.text-area","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/TextArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text area — TextArea","text":"","code":"TextArea(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/TextArea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text area — TextArea","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/TextArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text area — TextArea","text":"","code":"library(shiny.blueprint) library(shiny)  setInput <- function(inputId, accessor = NULL) {   JS(paste0(\"x => Shiny.setInputValue('\", inputId, \"', x\", accessor, \")\")) }  ui <- function(id) {   ns <- NS(id)   tagList(     H4(\"Uncontrolled\"),     TextArea(       growVertically = TRUE,       onChange = setInput(ns(\"uncontrolledTextarea\"), \".target.value\"),       large = TRUE,       intent = \"primary\"     ),     textOutput(ns(\"uncontrolledTextareaOutput\")),     H4(\"Controlled\"),     TextArea.shinyInput(       inputId = ns(\"controlledTextarea\"),       growVertically = TRUE,       large = TRUE,       intent = \"primary\"     ),     textOutput(ns(\"controlledTextareaOutput\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$uncontrolledTextareaOutput <- renderText(input$uncontrolledTextarea)     output$controlledTextareaOutput <- renderText(input$controlledTextarea)   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Toaster — Toaster","title":"Toaster — Toaster","text":"Documentation: https://blueprintjs.com/docs/#core/components/toast","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Toaster — Toaster","text":"Toaster$new() Toaster$show() Toaster$clear() Toaster$dismiss() Toaster$clone()","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toaster — Toaster","text":"","code":"Toaster$new(   toasterId = incrementToasterId(),   session = shiny::getDefaultReactiveDomain(),   ... )"},{"path":[]},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Toaster — Toaster","text":"","code":"Toaster$show(..., key = NULL)"},{"path":[]},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Toaster — Toaster","text":"","code":"Toaster$clear()"},{"path":[]},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Toaster — Toaster","text":"","code":"Toaster$dismiss(key)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Toaster — Toaster","text":"objects class cloneable method.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Toaster — Toaster","text":"","code":"Toaster$clone(deep = FALSE)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Toaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toaster — Toaster","text":"deep Whether make deep clone.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree — Tree","title":"Tree — Tree","text":"Documentation: https://blueprintjs.com/docs/#core/components/tree","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree — Tree","text":"","code":"Tree(...)  Tree.shinyInput(inputId, data, ...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree — Tree","text":"... Component props children. See official Blueprint docs details. inputId input slot used access value. data list nodes parameters: required: label optional: childNodes, icon, hasCaret, isExpanded, disabled, secondaryLabel","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/Tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree — Tree","text":"","code":"library(shiny.blueprint) library(purrr) library(shiny)  treeList <- list(   list(     id = 0,     hasCaret = TRUE,     icon = \"folder-close\",     label = \"Tree\"   ),   list(     id = 1,     icon = \"folder-close\",     isExpanded = TRUE,     label = \"Hello here\",     childNodes = list(       list(         id = 2,         icon = \"document\",         label = \"Item 0\",         secondaryLabel = Icon(icon = \"eye-open\")       ),       list(         id = 3,         icon = \"tag\",         label = \"Organic meditation gluten-free, sriracha VHS drinking vinegar beard man.\",         childNodes = list(           list(             id = 4,             icon = \"document\",             label = \"Item 0\",             secondaryLabel = Icon(icon = \"eye-open\")           ),           list(             id = 5,             icon = \"tag\",             label = \"Some other stuff\"           )         )       )     )   ),   list(     id = 10,     hasCaret = TRUE,     icon = \"folder-close\",     label = \"Super secret files\",     disabled = TRUE   ) )  modifyTree <- function(tree, ids, props) {   if (!is.null(tree)) purrr::map(tree, function(node) {     if (node$id %in% ids) {       node <- purrr::list_modify(node, !!!props)     }     node$childNodes <- modifyTree(node$childNodes, ids, props)     node   }) }  ui <- function(id) {   ns <- NS(id)   tagList(     reactOutput(ns(\"tree\")),     Divider(),     reactOutput(ns(\"info\")),     Divider(),     Tree.shinyInput(       inputId = ns(\"selected_nodes\"),       data = list(         list(           label = \"1\",           isExpanded = TRUE,           childNodes = list(             list(               label = \"1.1\",               childNodes = list(list(label = \"1.1.1\"))             ),             list(label = \"1.2\")           )         ),         list(           label = \"2\",           childNodes = list(             list(label = \"2.1\")           )         ),         list(label = \"3\", hasCaret = TRUE)       )     ),     Divider(),     tags$span(\"Hold \", tags$b(\"shift\"), \" to select multiple nodes.\"),     reactOutput(ns(\"selected_nodes_list\")),   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      treeReactive <- reactiveVal(treeList)     observeEvent(input$expand, {       treeReactive(         modifyTree(treeReactive(), ids = input$expand$id, props = list(isExpanded = TRUE))       )     })     observeEvent(input$collapse, {       treeReactive(         modifyTree(treeReactive(), ids = input$collapse$id, props = list(isExpanded = FALSE))       )     })      output$tree <- renderReact({       Tree(         contents = treeReactive(),         onNodeExpand = setInput(ns(\"expand\")),         onNodeCollapse = setInput(ns(\"collapse\")),         onNodeClick = setInput(ns(\"click\"))       )     })       output$info <- renderReact({       UL(         tags$li(\"Selected (id): \", input$click$id),         tags$li(\"Selected (label): \", input$click$label)       )      })      output$selected_nodes_list <- renderReact({       UL(lapply(input$selected_nodes, function(node) tags$li(node)))     })   }) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/htmlElements.html","id":null,"dir":"Reference","previous_headings":"","what":"HTML elements — htmlElements","title":"HTML elements — htmlElements","text":"Documentation: https://blueprintjs.com/docs/#core/components/html","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/htmlElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTML elements — htmlElements","text":"","code":"H1(...)  H2(...)  H3(...)  H4(...)  H5(...)  H6(...)  Blockquote(...)  Code(...)  Pre(...)  OL(...)  UL(...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/htmlElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTML elements — htmlElements","text":"... Component props children. See official Blueprint docs details.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.blueprint/reference/htmlElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTML elements — htmlElements","text":"","code":"library(shiny.blueprint) library(shiny)  ui <- function(id) {   tagList(     H1(\"H1\"),     H2(\"H2\"),     H3(\"H3\"),     H4(\"H4\"),     H5(\"H5\"),     H6(\"H6\"),     Blockquote(\"Blockquote\"),     Code(\"Code\"),     Label(\"Label\"),     Pre(\"Pre\"),     OL(tags$li(\"OL\")),     UL(tags$li(\"UL\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) shinyApp(ui(\"app\"), function(input, output) server(\"app\"))"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. shiny.react JS, reactOutput, renderReact, setInput, triggerEvent","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/runExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example — runExample","title":"Run example — runExample","text":"Launch Shiny example app list available examples. Use shiny.blueprint::runExample(\"showcase\") run showcase app components.","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/reference/runExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example — runExample","text":"","code":"runExample(example = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.blueprint/reference/runExample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run example — runExample","text":"example name example run, NULL retrieve list examples. ... Additional arguments pass shiny::runApp().","code":""},{"path":"https://appsilon.github.io/shiny.blueprint/news/index.html","id":"shinyblueprint-010","dir":"Changelog","previous_headings":"","what":"shiny.blueprint 0.1.0","title":"shiny.blueprint 0.1.0","text":"Initial (internal) release.","code":""}]
