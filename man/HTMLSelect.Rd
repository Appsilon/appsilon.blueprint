% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R
\name{HTMLSelect}
\alias{HTMLSelect}
\alias{HTMLSelect.shinyInput}
\title{HTML select}
\usage{
HTMLSelect(...)

HTMLSelect.shinyInput(inputId, ..., value = defaultValue)
}
\arguments{
\item{...}{Component props and children. See the official Blueprint docs for details.}

\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{value}{Initial value.}
}
\description{
Documentation: \url{https://blueprintjs.com/docs/#core/components/html-select}
}
\examples{
library(appsilon.blueprint)
library(shiny)

setInput <- function(inputId, accessor = NULL) {
  JS(paste0("x => Shiny.setInputValue('", inputId, "', x", accessor, ")"))
}
ui <- function(id) {
  ns <- NS(id)
  tagList(
    H4("Uncontrolled"),
    HTMLSelect(
      options = rownames(mtcars),
      onChange = setInput(ns("uncontrolledHtmlSelect"), ".target.value")
    ),
    textOutput(ns("uncontrolledHtmlSelectOutput")),
    H4("Controlled"),
    HTMLSelect.shinyInput(
      inputId = ns("controlledHtmlSelect"),
      options = rownames(mtcars)
    ),
    textOutput(ns("controlledHtmlSelectOutput"))
  )
}

server <- function(id) {
  moduleServer(id, function(input, output, session) {
    output$uncontrolledHtmlSelectOutput <- renderText(input$uncontrolledHtmlSelect)
    output$controlledHtmlSelectOutput <- renderText(input$controlledHtmlSelect)
  })
}

if (interactive()) shinyApp(ui("app"), function(input, output) server("app"))
}
